#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/msg.h>

// Shared Memory Setup
#define SHM_NAME "/shm_example"
#define SHM_SIZE 1024

// Message Queue Setup
#define MSG_KEY 1234
#define MSG_SIZE 100

// Pipe Setup
#define PIPE_NAME "mypipe"

void pipe_example() {
    int pipe_fd[2];
    pid_t pid;
    char *msg = "Hello from pipe!";
    char buffer[100];

    if (pipe(pipe_fd) == -1) {
        perror("pipe");
        exit(1);
    }

    pid = fork();
    if (pid == 0) {  // Child (Reader)
        close(pipe_fd[1]);  // Close unused write end
        read(pipe_fd[0], buffer, sizeof(buffer));
        printf("Pipe (Reader): %s\n", buffer);
        close(pipe_fd[0]);
    } else {  // Parent (Writer)
        close(pipe_fd[0]);  // Close unused read end
        write(pipe_fd[1], msg, strlen(msg) + 1);
        printf("Pipe (Writer): Sent message\n");
        close(pipe_fd[1]);
        wait(NULL);
    }
}

void fifo_example() {
    const char *fifo_name = "/tmp/myfifo";
    char *msg = "Hello from FIFO!";
    char buffer[100];

    // Create FIFO (named pipe)
    mkfifo(fifo_name, 0666);

    pid_t pid = fork();
    if (pid == 0) {  // Child (Reader)
        int fd = open(fifo_name, O_RDONLY);
        read(fd, buffer, sizeof(buffer));
        printf("FIFO (Reader): %s\n", buffer);
        close(fd);
    } else {  // Parent (Writer)
        int fd = open(fifo_name, O_WRONLY);
        write(fd, msg, strlen(msg) + 1);
        printf("FIFO (Writer): Sent message\n");
        close(fd);
        wait(NULL);
        unlink(fifo_name);
    }
}

void msgq_example() {
    key_t key = MSG_KEY;
    int msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    struct {
        long mtype;
        char mtext[MSG_SIZE];
    } message;

    pid_t pid = fork();
    if (pid == 0) {  // Child (Reader)
        msgrcv(msgid, &message, sizeof(message.mtext), 1, 0);
        printf("Message Queue (Reader): %s\n", message.mtext);
    } else {  // Parent (Writer)
        message.mtype = 1;
        strcpy(message.mtext, "Hello from message queue!");
        msgsnd(msgid, &message, sizeof(message.mtext), 0);
        printf("Message Queue (Writer): Sent message\n");
        wait(NULL);
        msgctl(msgid, IPC_RMID, NULL);
    }
}

void shm_example() {
    int shm_fd;
    void *shm_ptr;
    char *message = "Hello from shared memory!";

    // Create shared memory object
    shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);
    if (shm_fd == -1) {
        perror("shm_open");
        exit(1);
    }

    // Set size of shared memory object
    ftruncate(shm_fd, SHM_SIZE);

    // Map shared memory object to the address space
    shm_ptr = mmap(NULL, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    if (shm_ptr == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }

    pid_t pid = fork();
    if (pid == 0) {  // Child (Reader)
        printf("Shared Memory (Reader): %s\n", (char *)shm_ptr);
    } else {  // Parent (Writer)
        strcpy(shm_ptr, message);
        printf("Shared Memory (Writer): Sent message\n");
        wait(NULL);
        shm_unlink(SHM_NAME);  // Cleanup shared memory object
    }

    // Unmap and close
    munmap(shm_ptr, SHM_SIZE);
    close(shm_fd);
}

int main() {
    printf("Select IPC method to demonstrate:\n");
    printf("1. Pipe\n");
    printf("2. FIFO (Named Pipe)\n");
    printf("3. Message Queue\n");
    printf("4. Shared Memory\n");
    printf("Enter your choice: ");

    int choice;
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            pipe_example();
            break;
        case 2:
            fifo_example();
            break;
        case 3:
            msgq_example();
            break;
        case 4:
            shm_example();
            break;
        default:
            printf("Invalid choice!\n");
            break;
    }

    return 0;
}
